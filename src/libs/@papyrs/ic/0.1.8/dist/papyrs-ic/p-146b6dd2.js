import{C as e,t,e as a,l as n,P as r,f as s,h as c}from"./p-5c5f3838.js";const o=async t=>{const{canisterId:a,agent:n,paths:r}=t,c=[...new Set(r)],o=c.map((e=>i(e,a))),p=new Map,y=c.map(((t,r)=>(async()=>{var y;try{const s=await n.readState(a,{paths:[o[r]]}),y=(await e.create({certificate:s.certificate,rootKey:n.rootKey,canisterId:a})).lookup(i(c[r],a));if(y)switch(t){case"time":p.set(t,h(y));break;case"controllers":p.set(t,w(y));break;case"module_hash":p.set(t,u(y));break;case"candid":p.set(t,(new TextDecoder).decode(y));break;default:if("string"!=typeof t&&"key"in t&&"path"in t)switch(t.decodeStrategy){case"raw":p.set(t.key,y);break;case"leb128":p.set(t.key,d(y));break;case"cbor":p.set(t.key,l(y));break;case"hex":p.set(t.key,u(y));break;case"utf-8":p.set(t.key,f(y))}}else console.warn(`Expected to find result for path ${t}, but instead found nothing.`),p.set("string"==typeof t?t:t.key,null)}catch(e){if(null===(y=null==e?void 0:e.message)||void 0===y?void 0:y.includes("Invalid certificate"))throw new s(e.message);p.set("string"!=typeof t&&"key"in t&&"path"in t?t.key:t,null),console.group(),console.warn(`Expected to find result for path ${t}, but instead found nothing.`),console.warn(e),console.groupEnd()}})()));return await Promise.all(y),p},i=(e,t)=>{const a=new TextEncoder,n=e=>new DataView(a.encode(e).buffer).buffer,r=new DataView(t.toUint8Array().buffer).buffer;switch(e){case"time":return[n("time")];case"controllers":return[n("canister"),r,n("controllers")];case"module_hash":return[n("canister"),r,n("module_hash")];case"subnet":return[n("subnet")];case"candid":return[n("canister"),r,n("metadata"),n("candid:service")];default:if("key"in e&&"path"in e){if("string"==typeof e.path||e.path instanceof ArrayBuffer){const t=e.path,a="string"==typeof t?n(t):t;return[n("canister"),r,n("metadata"),a]}return e.path}}throw new Error(`An unexpeected error was encountered while encoding your path for canister status. Please ensure that your path, ${e} was formatted correctly.`)},u=e=>t(e),d=e=>n(new c(e)),l=e=>a(e),f=e=>(new TextDecoder).decode(e),h=e=>{const t=d(e);return new Date(Number(t/BigInt(1e6)))},w=e=>{const[t,...a]=l(e);return a.map((e=>r.fromUint8Array(new Uint8Array(e))))};export{i as encodePath,o as request}